/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LibraryManagement;

import java.awt.Color;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class Userpage extends javax.swing.JFrame {
    static int cartTblSelRow=-1;
    /**
     * Creates new form Userpage
     */
    public Userpage() {
        initComponents();
        tableBookDetails();
        btnaddtocart.setVisible(false);
        btnreloadtabledata.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelcontol = new javax.swing.JPanel();
        btnsearchpanel = new javax.swing.JButton();
        btnchangepwdpanel = new javax.swing.JButton();
        btncartpanel = new javax.swing.JButton();
        btnreqpanel = new javax.swing.JButton();
        btnlogout = new javax.swing.JButton();
        panelcenter = new javax.swing.JPanel();
        panelsearchbook = new javax.swing.JPanel();
        tfsearchbook = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnsearchbook = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblsearchbook = new javax.swing.JTable();
        btnaddtocart = new javax.swing.JButton();
        btnreloadtabledata = new javax.swing.JButton();
        labeladdtocartmessage = new javax.swing.JLabel();
        panelreqbook = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblreqbook = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnreqcancel = new javax.swing.JButton();
        tfsearchreqbook = new javax.swing.JTextField();
        btnreqsearch = new javax.swing.JButton();
        cbfilter = new javax.swing.JComboBox<>();
        labelpendingfine = new javax.swing.JLabel();
        panelcart = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblcart = new javax.swing.JTable();
        btnsendreq = new javax.swing.JButton();
        btnclearcart = new javax.swing.JButton();
        btnremoveitem = new javax.swing.JButton();
        labelemptycart = new javax.swing.JLabel();
        labelremoveitem = new javax.swing.JLabel();
        panelchangepwd = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        pfnewpwd = new javax.swing.JPasswordField();
        pfconfirmpwd = new javax.swing.JPasswordField();
        btnchangepwdsubmit = new javax.swing.JButton();
        labelmessge = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        panelcontol.setBackground(new java.awt.Color(204, 204, 204));

        btnsearchpanel.setText("Search Book");
        btnsearchpanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchpanelActionPerformed(evt);
            }
        });

        btnchangepwdpanel.setText("Change Password");
        btnchangepwdpanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnchangepwdpanelActionPerformed(evt);
            }
        });

        btncartpanel.setText("Cart");
        btncartpanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncartpanelActionPerformed(evt);
            }
        });

        btnreqpanel.setText("My Requests");
        btnreqpanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnreqpanelActionPerformed(evt);
            }
        });

        btnlogout.setBackground(new java.awt.Color(35, 142, 219));
        btnlogout.setText("Log Out");
        btnlogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelcontolLayout = new javax.swing.GroupLayout(panelcontol);
        panelcontol.setLayout(panelcontolLayout);
        panelcontolLayout.setHorizontalGroup(
            panelcontolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelcontolLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelcontolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelcontolLayout.createSequentialGroup()
                        .addGroup(panelcontolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnreqpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnsearchpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelcontolLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panelcontolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnchangepwdpanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btncartpanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnlogout, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        panelcontolLayout.setVerticalGroup(
            panelcontolLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelcontolLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(btnsearchpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnreqpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btncartpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnchangepwdpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(btnlogout, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(249, Short.MAX_VALUE))
        );

        jPanel1.add(panelcontol, java.awt.BorderLayout.LINE_START);

        panelcenter.setLayout(new java.awt.CardLayout());

        panelsearchbook.setBackground(new java.awt.Color(255, 255, 255));

        tfsearchbook.setText("Enter the Book Name");
        tfsearchbook.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfsearchbookFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfsearchbookFocusLost(evt);
            }
        });
        tfsearchbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfsearchbookActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 36)); // NOI18N
        jLabel1.setText("Search Book");

        btnsearchbook.setText("Search");
        btnsearchbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchbookActionPerformed(evt);
            }
        });

        tblsearchbook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblsearchbook.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tblsearchbookFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tblsearchbookFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(tblsearchbook);

        btnaddtocart.setText("Add to Cart");
        btnaddtocart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddtocartActionPerformed(evt);
            }
        });

        btnreloadtabledata.setText("Reload");
        btnreloadtabledata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnreloadtabledataActionPerformed(evt);
            }
        });

        labeladdtocartmessage.setForeground(new java.awt.Color(13, 233, 101));

        javax.swing.GroupLayout panelsearchbookLayout = new javax.swing.GroupLayout(panelsearchbook);
        panelsearchbook.setLayout(panelsearchbookLayout);
        panelsearchbookLayout.setHorizontalGroup(
            panelsearchbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelsearchbookLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(tfsearchbook, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(panelsearchbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(panelsearchbookLayout.createSequentialGroup()
                        .addComponent(btnsearchbook)
                        .addGap(18, 18, 18)
                        .addComponent(btnreloadtabledata)
                        .addGap(63, 63, 63)
                        .addGroup(panelsearchbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnaddtocart)
                            .addComponent(labeladdtocartmessage, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(139, Short.MAX_VALUE))
            .addGroup(panelsearchbookLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        panelsearchbookLayout.setVerticalGroup(
            panelsearchbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelsearchbookLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(panelsearchbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfsearchbook, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnsearchbook)
                    .addComponent(btnaddtocart)
                    .addComponent(btnreloadtabledata))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labeladdtocartmessage, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        panelcenter.add(panelsearchbook, "card3");

        panelreqbook.setBackground(new java.awt.Color(255, 255, 255));

        tblreqbook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblreqbook.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(tblreqbook);

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 0, 36)); // NOI18N
        jLabel2.setText("Requested Books");

        btnreqcancel.setText("Cancel");
        btnreqcancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnreqcancelActionPerformed(evt);
            }
        });

        tfsearchreqbook.setText("Enter the Book Name");
        tfsearchreqbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfsearchreqbookActionPerformed(evt);
            }
        });

        btnreqsearch.setText("Search");
        btnreqsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnreqsearchActionPerformed(evt);
            }
        });

        cbfilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Requested Books", "Issued Books", "Expired Books", "Returned Books" }));
        cbfilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbfilterActionPerformed(evt);
            }
        });

        labelpendingfine.setForeground(new java.awt.Color(0, 102, 255));

        javax.swing.GroupLayout panelreqbookLayout = new javax.swing.GroupLayout(panelreqbook);
        panelreqbook.setLayout(panelreqbookLayout);
        panelreqbookLayout.setHorizontalGroup(
            panelreqbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelreqbookLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelreqbookLayout.createSequentialGroup()
                .addGroup(panelreqbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelreqbookLayout.createSequentialGroup()
                        .addGap(279, 279, 279)
                        .addComponent(jLabel2)
                        .addGap(131, 131, 131)
                        .addComponent(labelpendingfine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelreqbookLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tfsearchreqbook, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(cbfilter, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btnreqsearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 225, Short.MAX_VALUE)
                        .addComponent(btnreqcancel)))
                .addGap(40, 40, 40))
        );
        panelreqbookLayout.setVerticalGroup(
            panelreqbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelreqbookLayout.createSequentialGroup()
                .addGroup(panelreqbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelreqbookLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(panelreqbookLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(labelpendingfine, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(panelreqbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelreqbookLayout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelreqbookLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(panelreqbookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnreqsearch)
                            .addComponent(tfsearchreqbook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnreqcancel)
                            .addComponent(cbfilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(253, Short.MAX_VALUE))
        );

        panelcenter.add(panelreqbook, "card4");

        panelcart.setBackground(new java.awt.Color(255, 255, 255));
        panelcart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelcartMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 0, 36)); // NOI18N
        jLabel3.setText("Cart");

        tblcart.setOpaque(false);
        tblcart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tblcartFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tblcartFocusLost(evt);
            }
        });
        tblcart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblcartMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblcart);

        btnsendreq.setText("Send Request");
        btnsendreq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsendreqActionPerformed(evt);
            }
        });

        btnclearcart.setText("Clear Cart");
        btnclearcart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclearcartActionPerformed(evt);
            }
        });

        btnremoveitem.setText("Remove Item");
        btnremoveitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnremoveitemActionPerformed(evt);
            }
        });

        labelemptycart.setFont(new java.awt.Font("Courier", 0, 36)); // NOI18N
        labelemptycart.setToolTipText("");

        labelremoveitem.setBackground(new java.awt.Color(255, 51, 51));
        labelremoveitem.setForeground(new java.awt.Color(255, 0, 51));
        labelremoveitem.setText("                            ");

        javax.swing.GroupLayout panelcartLayout = new javax.swing.GroupLayout(panelcart);
        panelcart.setLayout(panelcartLayout);
        panelcartLayout.setHorizontalGroup(
            panelcartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelcartLayout.createSequentialGroup()
                .addGap(405, 405, 405)
                .addGroup(panelcartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelcartLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelemptycart, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))
                    .addGroup(panelcartLayout.createSequentialGroup()
                        .addComponent(btnclearcart, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelcartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelcartLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(labelremoveitem))
                            .addGroup(panelcartLayout.createSequentialGroup()
                                .addComponent(btnremoveitem)
                                .addGap(30, 30, 30)
                                .addComponent(btnsendreq)))))
                .addContainerGap(79, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelcartLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        panelcartLayout.setVerticalGroup(
            panelcartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelcartLayout.createSequentialGroup()
                .addGroup(panelcartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelcartLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel3))
                    .addGroup(panelcartLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelemptycart, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(panelcartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnclearcart, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnremoveitem, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnsendreq, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelremoveitem)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(149, Short.MAX_VALUE))
        );

        panelcenter.add(panelcart, "card5");

        panelchangepwd.setBackground(new java.awt.Color(255, 255, 255));

        jLabel18.setFont(new java.awt.Font("Courier 10 Pitch", 0, 36)); // NOI18N
        jLabel18.setText("Change Password");

        jLabel20.setText("Enter New Password");

        jLabel21.setText("Confirm New Password");

        pfnewpwd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pfnewpwdFocusGained(evt);
            }
        });
        pfnewpwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pfnewpwdActionPerformed(evt);
            }
        });

        pfconfirmpwd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pfconfirmpwdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                pfconfirmpwdFocusLost(evt);
            }
        });
        pfconfirmpwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pfconfirmpwdActionPerformed(evt);
            }
        });

        btnchangepwdsubmit.setText("Submit");
        btnchangepwdsubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnchangepwdsubmitActionPerformed(evt);
            }
        });

        labelmessge.setForeground(new java.awt.Color(237, 0, 0));

        javax.swing.GroupLayout panelchangepwdLayout = new javax.swing.GroupLayout(panelchangepwd);
        panelchangepwd.setLayout(panelchangepwdLayout);
        panelchangepwdLayout.setHorizontalGroup(
            panelchangepwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelchangepwdLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addGap(325, 325, 325))
            .addGroup(panelchangepwdLayout.createSequentialGroup()
                .addGroup(panelchangepwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelchangepwdLayout.createSequentialGroup()
                        .addGap(487, 487, 487)
                        .addComponent(labelmessge, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelchangepwdLayout.createSequentialGroup()
                        .addGap(270, 270, 270)
                        .addGroup(panelchangepwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addGap(66, 66, 66)
                        .addGroup(panelchangepwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnchangepwdsubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pfnewpwd, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                            .addComponent(pfconfirmpwd))))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        panelchangepwdLayout.setVerticalGroup(
            panelchangepwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelchangepwdLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel18)
                .addGap(77, 77, 77)
                .addGroup(panelchangepwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pfnewpwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(panelchangepwdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(pfconfirmpwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelmessge, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnchangepwdsubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(329, Short.MAX_VALUE))
        );

        panelcenter.add(panelchangepwd, "card8");

        jPanel1.add(panelcenter, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfsearchbookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfsearchbookActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfsearchbookActionPerformed

    private void tfsearchbookFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfsearchbookFocusGained
        if(tfsearchbook.getText().equalsIgnoreCase("Enter the Book Name")){
            tfsearchbook.setText("");
        }
    }//GEN-LAST:event_tfsearchbookFocusGained

    private void tfsearchbookFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfsearchbookFocusLost
        if(tfsearchbook.getText().equalsIgnoreCase("")){
            tfsearchbook.setText("Enter the Book Name");
        }
    }//GEN-LAST:event_tfsearchbookFocusLost

    private void btnsendreqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsendreqActionPerformed
        Connection con = Connect.connectDB();
        PreparedStatement pst;
        ResultSet rs = null;
        User userObj = TemporaryData.getCurrentUser();
        List<String> isbnClearList = new ArrayList<>();
        String sql = "select * from reqtable where status != 'returned' and userid=" + userObj.getUserid();
        try {
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            List<String> reqTableIsbnList = new ArrayList<>();
            while (rs.next()) {
                reqTableIsbnList.add(rs.getString("isbn"));
            }
            int reqIsbnCount = reqTableIsbnList.size();
            sql = "select * from carttable where userid=" + userObj.getUserid();
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            sql = "insert into reqtable(userid,isbn,bookname,reqdate,status,paidfine,reqid,relatedreqid) values(?,?,?,?,?,?,?,?)";
            pst = con.prepareStatement(sql);
            boolean didSet;
            String uuid;
            while (rs.next() && reqIsbnCount < 5) {
                if (!reqTableIsbnList.contains(rs.getString("isbn"))) {
                    uuid = UUID.randomUUID().toString();
                    pst.setInt(1, rs.getInt("userid"));
                    pst.setString(2, rs.getString("isbn"));
                    pst.setString(3, rs.getString("bookname"));
                    pst.setDate(4, new Date(System.currentTimeMillis()));
                    pst.setString(5, "reqpending");
                    pst.setInt(6, 0);
                    pst.setString(7, uuid);
                    pst.setString(8, uuid);
                    pst.addBatch();
                    didSet = true;
                    reqIsbnCount++;
                    isbnClearList.add(rs.getString("isbn"));

                }
            }
            pst.executeBatch();
            if (reqIsbnCount <= 5) {
                JOptionPane.showMessageDialog(this, "you are already taken 5 books");
            } else {
                JOptionPane.showMessageDialog(this, "Success");
                clearCart(isbnClearList);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "btnsendreqActionPerformed()" + ex);
        }

    }//GEN-LAST:event_btnsendreqActionPerformed

    private void btnsearchpanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchpanelActionPerformed
        panelsearchbook.setVisible(true);
        panelreqbook.setVisible(false);
        panelcart.setVisible(false);
        panelchangepwd.setVisible(false);
        tableBookDetails();
        btnaddtocart.setVisible(false);
        labeladdtocartmessage.setText("");
    }//GEN-LAST:event_btnsearchpanelActionPerformed

    private void btnreqpanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnreqpanelActionPerformed
        panelsearchbook.setVisible(false);
        panelreqbook.setVisible(true);
        panelcart.setVisible(false);
        panelchangepwd.setVisible(false);
        cbfilter.setSelectedIndex(0);
        requestTableData();
    }//GEN-LAST:event_btnreqpanelActionPerformed

    private void btncartpanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncartpanelActionPerformed
        panelsearchbook.setVisible(false);
        panelreqbook.setVisible(false);
        panelcart.setVisible(true);
        panelchangepwd.setVisible(false);
        btnclearcart.setVisible(false);
        labeladdtocartmessage.setVisible(false);
        btnsendreq.setVisible(false);
        btnremoveitem.setVisible(false);
        tblcart.setVisible(false);
        labelemptycart.setVisible(false);
        jScrollPane3.setVisible(false);
        cartTableData();
    }//GEN-LAST:event_btncartpanelActionPerformed

    private void btnchangepwdpanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnchangepwdpanelActionPerformed
        panelsearchbook.setVisible(false);
        panelreqbook.setVisible(false);
        panelcart.setVisible(false);
        panelchangepwd.setVisible(true);
    }//GEN-LAST:event_btnchangepwdpanelActionPerformed

    private void pfnewpwdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pfnewpwdFocusGained
        labelmessge.setText("");
    }//GEN-LAST:event_pfnewpwdFocusGained

    private void pfnewpwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pfnewpwdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pfnewpwdActionPerformed

    private void pfconfirmpwdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pfconfirmpwdFocusGained
        labelmessge.setText("");
    }//GEN-LAST:event_pfconfirmpwdFocusGained

    private void pfconfirmpwdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pfconfirmpwdFocusLost

    }//GEN-LAST:event_pfconfirmpwdFocusLost

    private void pfconfirmpwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pfconfirmpwdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pfconfirmpwdActionPerformed

    private void btnchangepwdsubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnchangepwdsubmitActionPerformed
        Connection con=Connect.connectDB();
        PreparedStatement pst;
        ResultSet rs=null;
        if(!(pfnewpwd.getPassword().equals("")&&pfconfirmpwd.getPassword().equals(""))){
            if(String.valueOf(pfnewpwd.getPassword()).equals(String.valueOf(pfconfirmpwd.getPassword()))){
                String sql="update usertable set password=? where userid=?";
                try{
                    pst=con.prepareStatement(sql);
                    pst.setString(1,String.valueOf(pfnewpwd.getPassword()));
                    pst.setInt(2,TemporaryData.getCurrentUser().userid);
                    int ch = pst.executeUpdate();
                    if(ch==1){
                        JOptionPane.showMessageDialog(this, "Password Changed\n");
                        pfnewpwd.setText("");

                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Faild\n");
                    }
                }
                catch(SQLException e){
                    JOptionPane.showMessageDialog(this, "btnchangepwdsubmitActionPerformed() \n"+e);
                }
            }
            else{
                labelmessge.setText("Passwords don’t match. Please try again.");
            }
        }
        else{
            JOptionPane.showMessageDialog(this,"Enter the New Password");
        }
    }//GEN-LAST:event_btnchangepwdsubmitActionPerformed

    private void btnsearchbookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchbookActionPerformed
        Connection con=Connect.connectDB();
        PreparedStatement pst;
        ResultSet rs=null;
        DefaultTableModel mod =(DefaultTableModel) tblsearchbook.getModel();
       // String sql="select * booktable where bookname like '?%'";
        try {
            String sql="select count(distinct isbn) as rowscount from booktable where bookname like '%" + tfsearchbook.getText() + "%'";
            pst=con.prepareStatement(sql);
            //pst.setString(1,tfsearchbook.getText());
            rs=pst.executeQuery();
            int rowscount = 0;
            if(rs.next()){
                rowscount=rs.getInt("rowscount");
            
            sql="select * from booktable where bookname like '%" + tfsearchbook.getText() + "%'";
            pst=con.prepareStatement(sql);
           // pst.setString(1,tfsearchbook.getText());
            rs=pst.executeQuery();
            String[] columns = new String[]{
                "ISBN No.", "Book Name", "Author", "Publisher", "year"
            };
            Object[][] tdata = new Object[rowscount][5];
            int i=0;
            List<String> isbnList = new ArrayList<>();
            while (rs.next()) {
                if (rs.getString("isbn") != null && !isbnList.contains(rs.getString("isbn"))) {
                    tdata[i][0] = rs.getString("isbn");
                    tdata[i][1] = rs.getString("bookname");
                    tdata[i][2] = rs.getString("author");
                    tdata[i][3] = rs.getString("publisher");
                    tdata[i][4] = rs.getString("year");
                    isbnList.add(rs.getString("isbn"));
                    i++;
                }
            mod.setDataVector(tdata,columns);
            btnreloadtabledata.setVisible(true);
            }
            }
            else{
                JOptionPane.showMessageDialog(this,"books not found!!");
                tfsearchbook.setText("Enter the Book Name");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Sql exception in btnsearchbookActionPerformed()"+ex);
        }
        
                     
    }//GEN-LAST:event_btnsearchbookActionPerformed

    private void btnreloadtabledataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnreloadtabledataActionPerformed
        tableBookDetails();
        btnreloadtabledata.setVisible(false);
        tfsearchbook.setText("Enter the Book Name");
    }//GEN-LAST:event_btnreloadtabledataActionPerformed

    private void btnclearcartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclearcartActionPerformed
        int Conf=JOptionPane.showConfirmDialog(this,"Are yousure to delete?","Confirm",JOptionPane.YES_NO_OPTION);
            if(Conf==JOptionPane.YES_OPTION){
                clearCart(null);
            }
    }//GEN-LAST:event_btnclearcartActionPerformed

    private void btnremoveitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnremoveitemActionPerformed
        if(tblcart.getSelectedRow()!= -1){
            User userObj=TemporaryData.getCurrentUser();
            int i=tblcart.getSelectedRow();
            int c=0;
            String isbn =  (String) tblcart.getModel().getValueAt(i,1);
            DefaultTableModel mod =(DefaultTableModel) tblcart.getModel();
            Connection con=Connect.connectDB();
            PreparedStatement pst;
            ResultSet rs=null;
            String sql="delete from carttable where userid="+userObj.getUserid()+" and isbn='"+isbn+"'";
            try {
                pst=con.prepareStatement(sql);
                pst.execute();
                cartTableData();
            } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this,"btnclearcartActionPerformed()"+ex);            
            }
        }else{
            labelremoveitem.setText("please select a row");
        }
    }//GEN-LAST:event_btnremoveitemActionPerformed

    private void btnaddtocartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddtocartActionPerformed
        DefaultTableModel mod = (DefaultTableModel) tblsearchbook.getModel();
        Connection con = Connect.connectDB();
        PreparedStatement pst;
        ResultSet rs = null;
        User userObj;
        userObj = TemporaryData.getCurrentUser();
        String sql;
        List<String> cartIsbnList = new ArrayList<>();
        try {
            sql = "select * from carttable where userid=" + userObj.getUserid();
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();

            while (rs.next()) {
                    cartIsbnList.add(rs.getString("isbn"));
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "btnaddtocartActionPerformed()first try-catch" + ex);
        }
        if (cartIsbnList.size() < 5) {
            if (tblsearchbook.getSelectedRow() != -1) {
                int i = tblsearchbook.getSelectedRow();
                int c = 0;
                String isbn = (String) tblsearchbook.getModel().getValueAt(i, c);
                String bookname = (String) tblsearchbook.getModel().getValueAt(i, 1);
                if (!cartIsbnList.contains(isbn)) {
                    sql = "insert into carttable(cartdate,userid,isbn,bookname) values(?,?,?,?)";
                    try {
                        pst = con.prepareStatement(sql);
                        pst.setDate(1, new Date(System.currentTimeMillis()));
                        pst.setInt(2, userObj.getUserid());
                        pst.setString(3, isbn);
                        pst.setString(4, bookname);
                        pst.executeUpdate();
                        cartIsbnList.add(isbn);
                        labeladdtocartmessage.setVisible(true);
                        labeladdtocartmessage.setForeground(Color.GREEN);
                        labeladdtocartmessage.setText("Added to cart");

                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "btnaddtocartActionPerformed()second try-catch" + ex);
                    }
                } else {
                    labeladdtocartmessage.setForeground(Color.red);
                    labeladdtocartmessage.setText("Item already exist");
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Cannot add more than 5 books at a time");
        }

    }//GEN-LAST:event_btnaddtocartActionPerformed

    private void tblsearchbookFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblsearchbookFocusGained
        if(tblsearchbook.getSelectedRow()!= -1){
            btnaddtocart.setVisible(true);
            labeladdtocartmessage.setText("");
        }
    }//GEN-LAST:event_tblsearchbookFocusGained

    private void tblsearchbookFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblsearchbookFocusLost
        labeladdtocartmessage.setText("");
        
    }//GEN-LAST:event_tblsearchbookFocusLost

    private void tblcartFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblcartFocusGained
        
        if(tblcart.getSelectedRow()!= -1){
            labelremoveitem.setText("");
        }
        tblcartFocusLost(evt);
        /*if(tblcart.getSelectedRow()==cartTblSelRow){
                tblcart.clearSelection();
                
            }
            else {
                cartTblSelRow = tblcart.getSelectedRow();
            }*/

    }//GEN-LAST:event_tblcartFocusGained

    private void btnlogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlogoutActionPerformed
        
        dispose();
        TemporaryData.setCurrentUser(null);
        (new loginFrame()).setVisible(true);

    }//GEN-LAST:event_btnlogoutActionPerformed

    private void tblcartFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblcartFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_tblcartFocusLost

    private void panelcartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelcartMouseClicked
        tblcart.clearSelection();
    }//GEN-LAST:event_panelcartMouseClicked

    private void tblcartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblcartMouseClicked
        if(tblcart.getSelectedRow()==cartTblSelRow){
                tblcart.clearSelection();    
        }
        else {
            cartTblSelRow = tblcart.getSelectedRow();
        }
    }//GEN-LAST:event_tblcartMouseClicked

    private void tfsearchreqbookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfsearchreqbookActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfsearchreqbookActionPerformed

    private void btnreqsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnreqsearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnreqsearchActionPerformed

    private void cbfilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbfilterActionPerformed
        destroyTable();
        requestTableData();   
    }//GEN-LAST:event_cbfilterActionPerformed

    private void btnreqcancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnreqcancelActionPerformed
        if (tblreqbook.getSelectedRows().length == 1) {
            if (tblreqbook.getSelectedRow() != -1) {

                DefaultTableModel mod = (DefaultTableModel) tblreqbook.getModel();
                User userObj = TemporaryData.getCurrentUser();
                int r = tblreqbook.getSelectedRow();
                String isbn = (String) tblreqbook.getModel().getValueAt(r, 1);
                String sql = "delete from reqtable where isbn='" + isbn + "' and status='reqpending' and userid=" + userObj.getUserid();
                Connection con = Connect.connectDB();
                PreparedStatement pst;
                try {
                    pst = con.prepareStatement(sql);
                    pst.execute();
                    mod.removeRow(tblreqbook.getSelectedRow());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "btnreqcancelActionPerformed()\n" + ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "plz select a row");
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "plz select a single row");
        }

    }//GEN-LAST:event_btnreqcancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Userpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Userpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Userpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Userpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Userpage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnaddtocart;
    private javax.swing.JButton btncartpanel;
    private javax.swing.JButton btnchangepwdpanel;
    private javax.swing.JButton btnchangepwdsubmit;
    private javax.swing.JButton btnclearcart;
    private javax.swing.JButton btnlogout;
    private javax.swing.JButton btnreloadtabledata;
    private javax.swing.JButton btnremoveitem;
    private javax.swing.JButton btnreqcancel;
    private javax.swing.JButton btnreqpanel;
    private javax.swing.JButton btnreqsearch;
    private javax.swing.JButton btnsearchbook;
    private javax.swing.JButton btnsearchpanel;
    private javax.swing.JButton btnsendreq;
    private javax.swing.JComboBox<String> cbfilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labeladdtocartmessage;
    private javax.swing.JLabel labelemptycart;
    private javax.swing.JLabel labelmessge;
    private javax.swing.JLabel labelpendingfine;
    private javax.swing.JLabel labelremoveitem;
    private javax.swing.JPanel panelcart;
    private javax.swing.JPanel panelcenter;
    private javax.swing.JPanel panelchangepwd;
    private javax.swing.JPanel panelcontol;
    private javax.swing.JPanel panelreqbook;
    private javax.swing.JPanel panelsearchbook;
    private javax.swing.JPasswordField pfconfirmpwd;
    private javax.swing.JPasswordField pfnewpwd;
    private javax.swing.JTable tblcart;
    private javax.swing.JTable tblreqbook;
    private javax.swing.JTable tblsearchbook;
    private javax.swing.JTextField tfsearchbook;
    private javax.swing.JTextField tfsearchreqbook;
    // End of variables declaration//GEN-END:variables

    private void tableBookDetails() {
        Connection con = Connect.connectDB();
        PreparedStatement pst;
        try {
            ResultSet rs;
            DefaultTableModel mod = (DefaultTableModel) tblsearchbook.getModel();
            int rowsCount = getTableRowCount("select count(distinct isbn) as rowscount from booktable");
            String[] columns = new String[]{
                "ISBN No.", "Book Name", "Author", "Publisher", "year"
            };
            Object[][] tdata = new Object[rowsCount][5];
            int i = 0;
            rs = getTableBookData();
            List<String> isbnList = new ArrayList<>();
            while (rs.next()) {
                if (rs.getString("isbn") != null && !isbnList.contains(rs.getString("isbn"))) {
                    tdata[i][0] = rs.getString("isbn");
                    tdata[i][1] = rs.getString("bookname");
                    tdata[i][2] = rs.getString("author");
                    tdata[i][3] = rs.getString("publisher");
                    tdata[i][4] = rs.getString("year");
                    isbnList.add(rs.getString("isbn"));
                    i++;
                }
            }
            mod.setDataVector(tdata, columns);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "sqlexception in tableDataDetails\n" + e);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "exception in tableDatadetails\n" + e);
        }

    }
    private ResultSet getTableBookData() {
        Connection con;
        con=Connect.connectDB();
        ResultSet rs=null;
        PreparedStatement pst;
        String sql="select * from booktable";
        try{
            pst=con.prepareStatement(sql);
            rs=pst.executeQuery();
            //con.close();
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "sqlexception in getTableBookData in user page\n"+e);
        }
        return rs;     
    }
    private int getTableRowCount(String sql){
        int i=0;
        Connection con;
        con=Connect.connectDB();
        ResultSet rs=null;
        PreparedStatement pst;
        try{
            pst=con.prepareStatement(sql);
            rs=pst.executeQuery();
            if(rs.next()){
                i=rs.getInt("rowscount");
            }
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "sqlexception in getTableRowCount\n"+e);
        }
        return i;  
    }

    private void cartTableData(){
        DefaultTableModel mod = (DefaultTableModel) tblcart.getModel();
        Connection con;
        con=Connect.connectDB();
        ResultSet rs=null;
        PreparedStatement pst;
        User userObj=TemporaryData.getCurrentUser();
        String sql="select count(*) as rowscount from carttable where userid="+userObj.getUserid();
        try {
                pst=con.prepareStatement(sql);
                rs=pst.executeQuery();
                int rowscount = 0;
                if(rs.next()){
                    rowscount=rs.getInt("rowscount");         
                }
                if(rowscount!=0){
                    jScrollPane3.setVisible(true);
                    btnclearcart.setVisible(true);
                    btnsendreq.setVisible(true);
                    btnremoveitem.setVisible(true);
                    tblcart.setVisible(true);
                    labelemptycart.setVisible(false);
                    sql="select * from carttable where userid="+userObj.getUserid();
                    pst=con.prepareStatement(sql);
                     rs=pst.executeQuery(sql);
                    String[] columns = new String[] {
                        "Date", "ISBN No.", "Book Name"
                    };
                    Object[][] tdata = new Object[rowscount][6];
                    int i=0;
                     while(rs.next()){
                         tdata[i][0]=rs.getDate("cartdate");
                         tdata[i][1]=rs.getString("isbn");
                        tdata[i][2]=rs.getString("bookname");
                         i++;
                    }
                    mod.setDataVector(tdata, columns);
                }
                else{
                    jScrollPane3.setVisible(false);
                    tblcart.setVisible(false);
                    labelemptycart.setText("empty cart...");
                    //labelemptycart.setLocation(WIDTH, WIDTH);
                    labelemptycart.setHorizontalAlignment((int) CENTER_ALIGNMENT);
                    labelemptycart.setVerticalAlignment((int) CENTER_ALIGNMENT);
                }
        }catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "cartTableData()"+ex);
        }
        
    }

    private void clearCart(List<String> isbnClearList){




//todo isbnClearList from btnsendreqActionPerformed;


        Connection con = Connect.connectDB();
        PreparedStatement pst;
        ResultSet rs = null;
        User userObj;
        String sql;
        userObj = TemporaryData.getCurrentUser();
        if (isbnClearList == null) {
            sql = "delete from carttable where userid=" + userObj.getUserid();
            try {
                pst = con.prepareStatement(sql);
                pst.execute();
                tblcart.removeAll();
                btnclearcart.setVisible(false);
                tblcart.setVisible(false);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "clearCart()" + ex);
            }
        }
        else{
            sql = "delete from carttable where userid="+userObj.getUserid()+" and isbn=?";
            try {
                pst=con.prepareStatement(sql);
                for(int i=0;i<isbnClearList.size();i++){
                    pst.setString(1,isbnClearList.get(i));
                    pst.addBatch();   
                }
                pst.executeBatch();
                cartTableData();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "clearCart()" + ex);
            }
        }

    }

    private void requestTableData() {
        DefaultTableModel mod = (DefaultTableModel) tblreqbook.getModel();
        Connection con;
        con = Connect.connectDB();
        ResultSet rs = null;
        PreparedStatement pst;
        User userObj = TemporaryData.getCurrentUser();
        String sql = "select * from reqtable where userid=" + userObj.getUserid();
        try {
            if (cbfilter.getSelectedItem().toString().equalsIgnoreCase("All")) {
                rs = getReqTableData(sql);
                reqDataLoad(rs, "all");
            } else if (cbfilter.getSelectedItem().toString().equalsIgnoreCase("Requested Books")) {
                rs = getReqTableData(sql);
                reqDataLoad(rs, "reqpending");
            } else if (cbfilter.getSelectedItem().toString().equalsIgnoreCase("Issued Books")) {
                rs = getReqTableData(sql);
                reqDataLoad(rs, "issued");
            } else if (cbfilter.getSelectedItem().toString().equalsIgnoreCase("Expired Books")) {
                rs = getReqTableData(sql);
                reqDataLoad(rs, "expired");
            } else if (cbfilter.getSelectedItem().toString().equalsIgnoreCase("Returned Books")) {
                rs = getReqTableData(sql);
                reqDataLoad(rs, "returned");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "requestTable Data()OR throws SQLException" + ex);
        }

    }
    private List<BookRequest> createObjRequestList(ResultSet rs, String ch) throws SQLException {
        List<BookRequest> reqList = new ArrayList<>();
        if (rs != null) {

            int fineAmountPerDay = 5;
            while (rs.next()) {
                if (rs.getString("status").equals(ch)) {
                    BookRequest brObj = new BookRequest();
                    brObj.setUserid(rs.getInt("userid"));
                    brObj.setSerialNo(rs.getInt("serial"));
                    brObj.setIsbnNo(rs.getString("isbn"));
                    brObj.setBookName(rs.getString("bookname"));
                    brObj.setReqdate(rs.getDate("reqdate"));
                    brObj.setValidFrom(rs.getDate("validfrom"));
                    brObj.setValidTo(rs.getDate("validto"));
                    java.util.Date today = new java.util.Date();
                    java.util.Date validTo = brObj.getValidTo();
                    if (validTo != null && today.after(validTo)) {
                        long difference = validTo.getTime() - today.getTime();
                        int daysBetween = Math.abs(Math.round(difference / (1000 * 60 * 60 * 24)));
                        int fineAmt = daysBetween * fineAmountPerDay;
                        brObj.setFinePending(fineAmt);
                    }
                    reqList.add(brObj);
                }
                else if (ch.equalsIgnoreCase("all")) {
                    BookRequest brObj = new BookRequest();
                    brObj.setUserid(rs.getInt("userid"));

                    brObj.setSerialNo(rs.getInt("serial"));
                    brObj.setIsbnNo(rs.getString("isbn"));
                    brObj.setBookName(rs.getString("bookname"));
                    //TODO remaining columns
                    brObj.setReqdate(rs.getDate("reqdate"));
                    brObj.setValidFrom(rs.getDate("validfrom"));
                    brObj.setValidTo(rs.getDate("validto"));
                    java.util.Date today = new java.util.Date();
                    java.util.Date validTo = brObj.getValidTo();
                    if (validTo != null && today.after(validTo)) {
                        long difference = validTo.getTime() - today.getTime();
                        int daysBetween = Math.abs(Math.round(difference / (1000 * 60 * 60 * 24)));
                        int fineAmt = daysBetween * fineAmountPerDay;
                        brObj.setFinePending(fineAmt);
                    }
                    reqList.add(brObj);
                }
            }

        }
        return reqList;
    }

    private void reqDataLoad(ResultSet rs,String ch) throws SQLException {
        String[] columns = new String[] {
                "Serial No.", "ISBN No.", "Book Name","Req. Date","Valid From","Valid To","Pending Fine","Paid Fine"
        };
        DefaultTableModel mod =(DefaultTableModel) tblreqbook.getModel();
        List<BookRequest> requestList = createObjRequestList(rs,ch);
        int rowsCount = requestList.size(); 
        Object[][] tdata = new Object[rowsCount][8];
        int fine=0;
        for(int i=0; i<rowsCount; i++) {
                    tdata[i][0] =(requestList.get(i).getSerialNo()==0)?"":requestList.get(i).getSerialNo();
                    tdata[i][1] =requestList.get(i).getIsbnNo();
                    tdata[i][2] =requestList.get(i).getBookName();
                    tdata[i][3] =requestList.get(i).getReqdate();
                    tdata[i][4] =requestList.get(i).getValidFrom();
                    tdata[i][5] =requestList.get(i).getValidTo();
                    tdata[i][6] =requestList.get(i).getFinePending();
                    tdata[i][7] =requestList.get(i).getFinePaid();
                    fine=fine+=requestList.get(i).getFinePending();
        }
        
        labelpendingfine.setText("Total Pending Fine :"+fine);
        mod.setDataVector(tdata, columns);

    }
    private void destroyTable() {
        DefaultTableModel mod =(DefaultTableModel) tblreqbook.getModel();
        mod.getDataVector().removeAllElements();
        mod.fireTableDataChanged();
    }
    private ResultSet getReqTableData(String sql) {
        Connection con;
        con=Connect.connectDB();
        ResultSet rs=null;
        PreparedStatement pst;
        //String sql="select * from reqtable";
        try{
            pst=con.prepareStatement(sql);
            rs=pst.executeQuery();
            //con.close();
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, "sqlexception in getTableData\n"+e);
        }
        return rs;
    }
}
